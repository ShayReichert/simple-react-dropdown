{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["Dropdown","setSelectState","options","useState","isOptionsOpen","setIsOptionsOpen","selectedOption","setSelectedOption","setSelected","index","value","handleKeysDown","e","key","preventDefault","length","handleKeysDownOption","React","className","styles","dropdownWrapper","dropdownContainer","type","aria-haspopup","aria-expanded","dropdownButton","expanded","onClick","onKeyDown","label","iconDown","FiChevronDown","iconUp","FiChevronUp","dropdownOptions","show","role","aria-activedescendant","tabIndex","map","option","id","aria-selected","countries","App","selectState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c2daefbe.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport styles from './styles.module.css'\nimport { FiChevronDown, FiChevronUp } from 'react-icons/fi'\n\n/**\n * The Simple React Dropdown\n * @component\n * @param { Function } setSelectState\n * @param { Array.<{ value: String, label: String }> } options\n * @return { HTMLElement }\n */\nexport const Dropdown = ({ setSelectState, options }) => {\n  const [isOptionsOpen, setIsOptionsOpen] = useState(false)\n  const [selectedOption, setSelectedOption] = useState(0)\n\n  const toggleOptions = () => {\n    setIsOptionsOpen(!isOptionsOpen)\n  }\n\n  /**\n   * Set selected option with index, set selected state with value and close dropdown.\n   */\n  const setSelected = (index, value) => {\n    setSelectedOption(index)\n    setSelectState(value)\n    setIsOptionsOpen(false)\n  }\n\n  /**\n   * Accessibility : Handle key pressed to open dropdown and navigate\n   */\n  const handleKeysDown = (e) => {\n    switch (e.key) {\n      case 'Escape':\n        e.preventDefault()\n        setIsOptionsOpen(false)\n        break\n      case 'ArrowUp':\n        e.preventDefault()\n        setSelectedOption(\n          selectedOption - 1 >= 0 ? selectedOption - 1 : options.length - 1\n        )\n        break\n      case 'ArrowDown':\n        e.preventDefault()\n        setSelectedOption(\n          selectedOption === options.length - 1 ? 0 : selectedOption + 1\n        )\n        break\n      default:\n        break\n    }\n  }\n\n  /**\n   * Accessibility : Handle key pressed to select an option\n   */\n  const handleKeysDownOption = (index) => (e) => {\n    switch (e.key) {\n      case 'Enter':\n        e.preventDefault()\n        setSelected(index)\n        break\n      default:\n        break\n    }\n  }\n\n  return (\n    <div className={styles.dropdownWrapper}>\n      <div className={styles.dropdownContainer}>\n        <button\n          type='button'\n          aria-haspopup='listbox'\n          aria-expanded={isOptionsOpen}\n          className={`${styles.dropdownButton} ${\n            isOptionsOpen ? styles.expanded : ''\n          }`}\n          onClick={toggleOptions}\n          onKeyDown={handleKeysDown}\n        >\n          {options[selectedOption].label}\n          <div className={styles.iconDown}>\n            <FiChevronDown />\n          </div>\n          <div className={styles.iconUp}>\n            <FiChevronUp />\n          </div>\n        </button>\n        <ul\n          className={`${styles.dropdownOptions} ${\n            isOptionsOpen ? styles.show : ''\n          }`}\n          role='listbox'\n          aria-activedescendant={options[selectedOption].label}\n          tabIndex={-1}\n          onKeyDown={handleKeysDown}\n        >\n          {options.map((option, index) => (\n            <li\n              id={option.value}\n              key={index}\n              role='option'\n              aria-selected={selectedOption === index}\n              tabIndex={0}\n              onKeyDown={handleKeysDownOption(index)}\n              onClick={() => {\n                setSelected(index, option.value)\n              }}\n            >\n              {option.label}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { Dropdown } from 'simple-react-select-dropdown'\nimport 'simple-react-select-dropdown/dist/index.css'\n\n const countries = [\n   { value: 'AL', label: 'Alabama' },\n   { value: 'AK', label: 'Alaska' },\n   { value: 'AS', label: 'American Samoa' },\n   { value: 'AZ', label: 'Arizona' },\n   { value: 'AR', label: 'Arkansas' },\n   { value: 'CA', label: 'California' },\n   { value: 'CO', label: 'Colorado' },\n   { value: 'CT', label: 'Connecticut' },\n   { value: 'DE', label: 'Delaware' },\n   { value: 'DC', label: 'District Of Columbia' },\n   { value: 'FM', label: 'Federated States Of Micronesia' },\n   { value: 'FL', label: 'Florida' },\n   { value: 'GA', label: 'Georgia' },\n   { value: 'GU', label: 'Guam' },\n   { value: 'HI', label: 'Hawaii' },\n   { value: 'ID', label: 'Idaho' },\n   { value: 'IL', label: 'Illinois' },\n   { value: 'IN', label: 'Indiana' },\n   { value: 'IA', label: 'Iowa' },\n   { value: 'KSv', label: 'Kansas' },\n   { value: 'KY', label: 'Kentucky' },\n   { value: 'LA', label: 'Louisiana' },\n   { value: 'ME', label: 'Maine' },\n   { value: 'MH', label: 'Marshall Islands' },\n   { value: 'MD', label: 'Maryland' },\n   { value: 'MA', label: 'Massachusetts' },\n   { value: 'MI', label: 'Michigan' },\n   { value: 'MN', label: 'Minnesota' },\n   { value: 'MS', label: 'Mississippi' },\n   { value: 'MOv', label: 'Missouri' },\n   { value: 'MT', label: 'Montana' },\n   { value: 'NE', label: 'Nebraska' },\n   { value: 'NH', label: 'New Hampshire' },\n   { value: 'NJ', label: 'New Jersey' },\n   { value: 'NM', label: 'New Mexico' },\n   { value: 'XXNM', label: 'xxxxxxx' }\n ]\n\nconst App = () => {\n  const [selectState, setSelectState] = useState('')\n\n  return (\n    <div className='App'>\n      <Dropdown setSelectState={setSelectState} options={countries} />\n\n      <div className='select-option'>\n        {!selectState\n          ? \"Vous n'avez pas sélectionné d'état\"\n          : ` Vous avez sélectionner l'état ${selectState}`}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}