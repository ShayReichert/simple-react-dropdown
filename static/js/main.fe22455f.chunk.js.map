{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["Dropdown","setSelectState","options","useState","isOptionsOpen","setIsOptionsOpen","selectedOption","setSelectedOption","setSelected","index","value","handleKeysDown","e","key","preventDefault","length","handleKeysDownOption","React","className","styles","type","aria-haspopup","aria-expanded","onClick","onKeyDown","label","FiChevronDown","FiChevronUp","role","aria-activedescendant","tabIndex","map","option","id","aria-selected","countries","App","selectState","ReactDOM","render","document","getElementById"],"mappings":"sXAWaA,EAAW,SAAH,GAAoC,IAA9BC,EAAc,EAAdA,eAAgBC,EAAO,EAAPA,QACzC,EAA0CC,oBAAS,GAA5CC,EAAa,KAAEC,EAAgB,KACtC,EAA4CF,mBAAS,GAA9CG,EAAc,KAAEC,EAAiB,KASlCC,EAAc,SAACC,EAAOC,GAC1BH,EAAkBE,GAClBR,EAAeS,GACfL,GAAiB,IAMbM,EAAiB,SAACC,GACtB,OAAQA,EAAEC,KACR,IAAK,SACHD,EAAEE,iBACFT,GAAiB,GACjB,MACF,IAAK,UACHO,EAAEE,iBACFP,EACED,EAAiB,GAAK,EAAIA,EAAiB,EAAIJ,EAAQa,OAAS,GAElE,MACF,IAAK,YACHH,EAAEE,iBACFP,EACED,IAAmBJ,EAAQa,OAAS,EAAI,EAAIT,EAAiB,KAW/DU,EAAuB,SAACP,GAAK,OAAK,SAACG,GACvC,OAAQA,EAAEC,KACR,IAAK,QACHD,EAAEE,iBACFN,EAAYC,MAOlB,OACEQ,yBAAKC,UAAWC,GACdF,yBAAKC,UAAWC,GACdF,4BACEG,KAAK,SACLC,gBAAc,UACdC,gBAAelB,EACfc,UAAcC,EAAqB,KACjCf,EAAgBe,EAAkB,IAEpCI,QA/Dc,WACpBlB,GAAkBD,IA+DZoB,UAAWb,GAEVT,EAAQI,GAAgBmB,MACzBR,yBAAKC,UAAWC,GACdF,kBAACS,IAAa,OAEhBT,yBAAKC,UAAWC,GACdF,kBAACU,IAAW,QAGhBV,wBACEC,UAAcC,EAAsB,KAClCf,EAAgBe,EAAc,IAEhCS,KAAK,UACLC,wBAAuB3B,EAAQI,GAAgBmB,MAC/CK,UAAW,EACXN,UAAWb,GAEVT,EAAQ6B,KAAI,SAACC,EAAQvB,GAAK,OACzBQ,wBACEgB,GAAID,EAAOtB,MACXG,IAAKJ,EACLmB,KAAK,SACLM,gBAAe5B,IAAmBG,EAClCqB,SAAU,EACVN,UAAWR,EAAqBP,GAChCc,QAAS,WACPf,EAAYC,EAAOuB,EAAOtB,SAG3BsB,EAAOP,cC1GhBU,G,MAAY,CAChB,CAAEzB,MAAO,KAAMe,MAAO,WACtB,CAAEf,MAAO,KAAMe,MAAO,UACtB,CAAEf,MAAO,KAAMe,MAAO,gBAmBTW,EAhBH,WACV,MAAsCjC,mBAAS,IAAG,mBAA3CkC,EAAW,KAAEpC,EAAc,KAElC,OACE,yBAAKiB,UAAU,OACb,kBAAC,EAAQ,CAACjB,eAAgBA,EAAgBC,QAASiC,IAEnD,yBAAKjB,UAAU,iBACXmB,EACsC,+CACFA,GADlC,iDCbZC,IAASC,OAAO,kBAAC,EAAG,MAAKC,SAASC,eAAe,W","file":"static/js/main.fe22455f.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport styles from './styles.module.css'\nimport { FiChevronDown, FiChevronUp } from 'react-icons/fi'\n\n/**\n * The Simple React Dropdown\n * @component\n * @param { Function } setSelectState\n * @param { Array.<{ value: String, label: String }> } options\n * @return { HTMLElement }\n */\nexport const Dropdown = ({ setSelectState, options }) => {\n  const [isOptionsOpen, setIsOptionsOpen] = useState(false)\n  const [selectedOption, setSelectedOption] = useState(0)\n\n  const toggleOptions = () => {\n    setIsOptionsOpen(!isOptionsOpen)\n  }\n\n  /**\n   * Set selected option with index, set selected state with value and close dropdown.\n   */\n  const setSelected = (index, value) => {\n    setSelectedOption(index)\n    setSelectState(value)\n    setIsOptionsOpen(false)\n  }\n\n  /**\n   * Accessibility : Handle key pressed to open dropdown and navigate\n   */\n  const handleKeysDown = (e) => {\n    switch (e.key) {\n      case 'Escape':\n        e.preventDefault()\n        setIsOptionsOpen(false)\n        break\n      case 'ArrowUp':\n        e.preventDefault()\n        setSelectedOption(\n          selectedOption - 1 >= 0 ? selectedOption - 1 : options.length - 1\n        )\n        break\n      case 'ArrowDown':\n        e.preventDefault()\n        setSelectedOption(\n          selectedOption === options.length - 1 ? 0 : selectedOption + 1\n        )\n        break\n      default:\n        break\n    }\n  }\n\n  /**\n   * Accessibility : Handle key pressed to select an option\n   */\n  const handleKeysDownOption = (index) => (e) => {\n    switch (e.key) {\n      case 'Enter':\n        e.preventDefault()\n        setSelected(index)\n        break\n      default:\n        break\n    }\n  }\n\n  return (\n    <div className={styles.dropdownWrapper}>\n      <div className={styles.dropdownContainer}>\n        <button\n          type='button'\n          aria-haspopup='listbox'\n          aria-expanded={isOptionsOpen}\n          className={`${styles.dropdownButton} ${\n            isOptionsOpen ? styles.expanded : ''\n          }`}\n          onClick={toggleOptions}\n          onKeyDown={handleKeysDown}\n        >\n          {options[selectedOption].label}\n          <div className={styles.iconDown}>\n            <FiChevronDown />\n          </div>\n          <div className={styles.iconUp}>\n            <FiChevronUp />\n          </div>\n        </button>\n        <ul\n          className={`${styles.dropdownOptions} ${\n            isOptionsOpen ? styles.show : ''\n          }`}\n          role='listbox'\n          aria-activedescendant={options[selectedOption].label}\n          tabIndex={-1}\n          onKeyDown={handleKeysDown}\n        >\n          {options.map((option, index) => (\n            <li\n              id={option.value}\n              key={index}\n              role='option'\n              aria-selected={selectedOption === index}\n              tabIndex={0}\n              onKeyDown={handleKeysDownOption(index)}\n              onClick={() => {\n                setSelected(index, option.value)\n              }}\n            >\n              {option.label}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { Dropdown } from 'simple-react-dropdown'\nimport 'simple-react-dropdown/dist/index.css'\n\nconst countries = [\n  { value: 'al', label: 'Alabama' },\n  { value: 'ak', label: 'Alaska' },\n  { value: 'cl', label: 'California' }\n]\n\nconst App = () => {\n  const [selectState, setSelectState] = useState('')\n\n  return (\n    <div className='App'>\n      <Dropdown setSelectState={setSelectState} options={countries} />\n\n      <div className='select-option'>\n        {!selectState\n          ? \"Vous n'avez pas sélectionné d'état\"\n          : ` Vous avez sélectionner l'état ${selectState}`}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}